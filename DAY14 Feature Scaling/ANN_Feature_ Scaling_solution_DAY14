{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[{"file_id":"1RO_zr_tQ3BNsXnC3GhDtgR0KuMPaUI7_","timestamp":1726144851815},{"file_id":"1ahyTCXn-3LXAXyJkvqVyfqNlQ4Eex31M","timestamp":1726057833443},{"file_id":"1sUMvMIQRQaOZ9J_H8sHaj9zr3VH34vdK","timestamp":1725989843585}],"authorship_tag":"ABX9TyMcHOYgHswhkkI24jq+Cem3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Feature SCALING\n","\n","# Implementation"],"metadata":{"id":"buV9E0bf-37g"}},{"cell_type":"markdown","source":["IMPORTING THE DATA SCIENCE LIBRARIES"],"metadata":{"id":"HNvHInaq_BMJ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"eum2WGOnBeeL"},"outputs":[],"source":["\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","import time"]},{"cell_type":"markdown","source":["Importing the ML / Scikit learn EVERYTHING"],"metadata":{"id":"egI1aKHM_G4g"}},{"cell_type":"code","source":["\n","from sklearn.model_selection import train_test_split               #for splitting the data into test and training data\n","from sklearn.compose import ColumnTransformer                       #for transforming the columns\n","from sklearn.impute import SimpleImputer                             #for imputing the missing values\n","from sklearn.preprocessing import OneHotEncoder                      #one hot encoding\n","from sklearn.preprocessing import MinMaxScaler                        #standard scaling\n","from sklearn.pipeline import Pipeline,make_pipeline                    #here we wont use pipelines\n","from sklearn.feature_selection import SelectKBest,chi2                 #feature selection                     #standard scaling\n","from sklearn.tree import DecisionTreeClassifier"],"metadata":{"id":"v-A2uAybzaKX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Dataset Preprocessing and CLEANING"],"metadata":{"id":"ADdQQGes_Sdp"}},{"cell_type":"code","source":["\n","from google.colab import files    # we are importing the file from the device\n","uploaded = files.upload()"],"metadata":{"id":"GynCwG0YCHzg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('Social_Network_Ads.csv')\n","df.head()"],"metadata":{"id":"5btQS0GnzulN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.shape   #checking the shape of the data"],"metadata":{"id":"uYYUMmaXDB6L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.info()  #checking the info of the data"],"metadata":{"id":"CTeAHSkCDMTk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.describe()  #checking the statistical description of the data"],"metadata":{"id":"1Ik4DxWTDONQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = df[['Age','EstimatedSalary','Purchased']]\n","df.head()"],"metadata":{"id":"jtbiihl68bfG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Drawing the SCATTER PLOT"],"metadata":{"id":"V1L2wjUgEyow"}},{"cell_type":"code","source":["sns.scatterplot(x='Age',y='EstimatedSalary',data=df,hue='Purchased')"],"metadata":{"id":"Xxu29yn7EwaF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = df.drop(columns=['Purchased'])\n","y = df['Purchased']"],"metadata":{"id":"HBzF5maf0D6B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"id":"Ra4dvdOP0K3k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y"],"metadata":{"id":"8KEzjeWN0LpX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# TRAIN  / TEST SPLIT"],"metadata":{"id":"ErFOYn0X_iFu"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)"],"metadata":{"id":"LQ8WlW0P0dHI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train"],"metadata":{"id":"zKNetxLS0e5L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train"],"metadata":{"id":"4fxgFS2J0khy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test"],"metadata":{"id":"Mg5pIHMM0o3i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_test"],"metadata":{"id":"J2AaaSxI0r3h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.shape"],"metadata":{"id":"dDO23e1k6eEr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Scaling ( STANDARD SCALING )"],"metadata":{"id":"b6emVYzL_hrX"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","\n","X_train_scaled = scaler.fit_transform(X_train)    #scaling X_train data\n","\n","X_test_scaled = scaler.transform(X_test)           #scaling X_test data"],"metadata":{"id":"o0bDrSmD0_5T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train_scaled"],"metadata":{"collapsed":true,"id":"1Y3RN7ZISMpO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test_scaled"],"metadata":{"collapsed":true,"id":"4VNjKBEnSRCQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Plotting the Graph"],"metadata":{"id":"dG_MZM8vSVmf"}},{"cell_type":"code","source":["sns.scatterplot(x=X_train_scaled[:,0],y=X_train_scaled[:,1],hue=y_train)"],"metadata":{"id":"P-4SRZUuSY7Z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["BOTH THE GRAPHS ARE EXACTLY SAME JUST , THIS HAS BEEN SCALED ."],"metadata":{"id":"eAoKbTapSir1"}},{"cell_type":"markdown","source":["# IMPORTING TENSORFLOW AND KERAS"],"metadata":{"id":"vQpzeVa3_iZk"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import Sequential\n","from tensorflow.keras.layers import Dense"],"metadata":{"id":"P8kadipN4yQY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Architechture of the Neural Netork"],"metadata":{"id":"NLx34-NZAKS4"}},{"cell_type":"markdown","source":["Activation function is Sigmoid as we are classifying into purchased and not purchased"],"metadata":{"id":"1HoVzn325e68"}},{"cell_type":"code","source":["model = Sequential()                         #\n","\n","model.add(Dense(128,activation='relu',input_dim=2))\n","#model.add(Dense(10,activation='relu'))\n","model.add(Dense(1,activation='sigmoid'))"],"metadata":{"id":"Za94CG-k9T34"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["WE have taken 2 inPuts Age and Estimated_salary\n","\n","\n","We have 1 hidden layers of 128 nuerons each with activation function ' relu ' as it works the best\n","\n","IN the output layer- WE have 1 neuron with activation function sigmoid because it is best for binary classfication\n","\n"],"metadata":{"id":"7KTL03vP33S2"}},{"cell_type":"code","source":["model.summary()"],"metadata":{"id":"Pxbb7KDa4TUB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We use binary_crossentropy as we are classifying purchased into yes or no\n","\n","2 classes"],"metadata":{"id":"z8BLtZlb5HO-"}},{"cell_type":"markdown","source":["Now we use both the X_train_scaled data for fitting and X_test_scaled data for cross validating the model"],"metadata":{"id":"oE0RQYuWTJjK"}},{"cell_type":"code","source":["model.compile(loss='binary_crossentropy',metrics=['accuracy'])  #compiling the model\n","\n","history = model.fit(X_train_scaled,y_train,validation_data=(X_test_scaled , y_test ) , epochs=100)\n"],"metadata":{"id":"GwVATKuS5BI4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# GRAPH FOR VALIDATION ACCURACY"],"metadata":{"id":"oAu0u36RGeTJ"}},{"cell_type":"code","source":["plt.plot(history.history['val_accuracy'])\n","plt.plot(history.history['accuracy'])\n","plt.title('model accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper left')"],"metadata":{"id":"vOmtpr1TGkJB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Our training accuracy is 86 perc and our testing accuracy is quite high as 92 perc"],"metadata":{"id":"1HAz7eXHTwAs"}}]}